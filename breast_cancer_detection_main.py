# -*- coding: utf-8 -*-
"""Breast Cancer Detection_main

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/129JLqBrmKMAeE2xdFFW1syRHLAsHfjDW
"""

#breast  cancer detection with logistic regression
import numpy as np
import sklearn.datasets
import pandas as pd

#getting the dataset
breast_cancer=sklearn.datasets.load_breast_cancer()
print(breast_cancer)
x=breast_cancer.data
y=breast_cancer.target
print(x)
print(y)

#trainning data
print(x.shape,y.shape)

data=pd.DataFrame(breast_cancer.data,columns=breast_cancer.feature_names)
data['class']=breast_cancer.target
data.head()

#Satical value 
data.describe()

print(data['class'].value_counts())

data.groupby('class').mean()

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test=train_test_split(x,y)
print(y.shape,y_train.shape,y_test.shape)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1)
print(y.shape,y_train.shape,y_test.shape)

print(y.mean(),y_train.mean(),y_test.mean())

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y)
#stratify--> for correct distrubution of data as of the oroginal data

print(y.mean(),y_train.mean(),y_test.mean())

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=1)
#random_sate-->specific split of data.each value of random +state split the differently

print(x.mean(),x_train.mean(),x_test.mean())

print(x_train)

#import logistic regression from sklearn
from sklearn.linear_model import LogisticRegression

classifier=LogisticRegression()#loading the logistic regression model to the varaible

classifier.fit(x_train, y_train)

#import accuracy _score 
from sklearn.metrics import  accuracy_score

prediction_on_traning_data=classifier.predict(x_train)
accuracy_on_traning_data=accuracy_score(y_train,prediction_on_traning_data )

print("accuracy on tarining data:",accuracy_on_traning_data)

#prediction on test data
prediction_on_test_data=classifier.predict(x_test)
accuracy_on_test_data=accuracy_score(y_test,prediction_on_test_data)

print("accuracy on test data:",accuracy_on_test_data)



"""Detecting whether the patient has breast cancer  in benign or malignat stage"""

input_data=(17.99,10.38,122.8,1001,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189)
#change the input_data to numpy _array to make prediction
input_data_as_numpy_array=np.asarray(input_data)
print(input_data)
#reshape the array as we are predicting the o/p for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
#prediction
prediction=classifier.predict(input_data_reshaped)
print(prediction)#return a list with element [0] if Malignat ; return a list with element[1]Benign
if (prediction[0]==0):
  print("the breast cancer is Malignant")
else:
  print("the breast cancer is Benign")